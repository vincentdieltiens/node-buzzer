{"version":3,"sources":["websocket/buzzer.js"],"names":["ip","ws","WebsocketBuzzer","port","handlers","timeout","initWebsocket","close","controllerIndexes","conn","send","JSON","stringify","times","duration","console","log","interval","startTime","Date","now","tick","currentTime","clearInterval","triggerEvent","setInterval","createServer","on","str","data","parse","press","undefined","controllerIndex","buttonIndex","key","callHandlers","code","reason","listen"],"mappings":";AACA;;;;;;;;;AAEA;;IAAYA,E;;AACZ;;IAAYC,E;;AACZ;;AACA;;AACA;;;;;;;;;;IAEaC,e,WAAAA,e;;;AAEZ,4BAAuB;AAAA,MAAXC,IAAW,uEAAN,IAAM;;AAAA;;AAAA;;AAEtB,QAAKA,IAAL,GAAYA,IAAZ;AACA,QAAKC,QAAL,GAAgB,EAAhB;AAHsB;AAItB;;;;4BAEqB;AAAA,OAAdC,OAAc,uEAAN,IAAM;;AACrB,QAAKA,OAAL,GAAeA,OAAf;AACA,QAAKC,aAAL;AACA;;;0BAEO;AACP,QAAKL,EAAL,CAAQM,KAAR;AACA;;;0BAEOC,iB,CAAiB,Q,EAAU;AAClC,QAAKC,IAAL,CAAUC,IAAV,CAAeC,KAAKC,SAAL,CAAe;AAC7B,cAAUJ,iBADmB;AAE7B,UAAM;AAFuB,IAAf,CAAf;AAIA;;;2BAEQA,iB,CAAiB,Q,EAAU;AACnC,QAAKC,IAAL,CAAUC,IAAV,CAAeC,KAAKC,SAAL,CAAe;AAC7B,cAAUJ,iBADmB;AAE7B,UAAM;AAFuB,IAAf,CAAf;AAIA;;;wBAEKA,iB,CAAiB,kB,EAAiE;AAAA,OAA7CK,KAA6C,CAAxC,WAAwC,uEAA5B,CAA4B;AAAA,OAAzBC,QAAyB,CAAjB,WAAiB,uEAAL,GAAK;AACvF;;;kCAEe;AAAA;;AACfC,WAAQC,GAAR,CAAY,iCAA+B,KAAKb,IAAhD;;AAEA,OAAIc,iBAAJ;AACA,OAAIC,YAAYC,KAAKC,GAAL,EAAhB;AACA,OAAIC,OAAO,SAAPA,IAAO,GAAM;AAChB,QAAIC,cAAcH,KAAKC,GAAL,EAAlB;AACA,QAAIE,cAAcJ,SAAd,GAA0B,OAAKb,OAAnC,EAA4C;AAC3CkB,mBAAcN,QAAd;AACA,SAAI,OAAKhB,EAAT,EAAa;AACZ,aAAKA,EAAL,CAAQM,KAAR;AACA;AACD,YAAKiB,YAAL,CAAkB,OAAlB,EAA2B,6CAAwB,sBAAxB,CAA3B;AACA;AACD,IATD;AAUAP,cAAWQ,YAAYJ,IAAZ,EAAkB,IAAlB,CAAX;AACAA;;AAEA,QAAKpB,EAAL,GAAUA,GAAGyB,YAAH,CAAgB,UAACjB,IAAD,EAAU;AACnC,WAAKA,IAAL,GAAYA,IAAZ;;AAEAc,kBAAcN,QAAd;AACA,WAAKO,YAAL,CAAkB,OAAlB;;AAEAf,SAAKkB,EAAL,CAAQ,MAAR,EAAgB,UAACC,GAAD,CAAI,WAAJ,EAAoB;AACnC,SAAIC,OAAOlB,KAAKmB,KAAL,CAAWF,GAAX,CAAX;;AAEA,SAAIC,KAAKE,KAAL,IAAcC,SAAlB,EAA6B;AAC5B,UAAIC,kBAAkBJ,KAAKE,KAA3B;AACA,UAAIG,cAAc,CAAlB;;AAEA,UAAIC,MAAM,MAAIF,eAAd;AACA,aAAKG,YAAL,CAAkBD,GAAlB,EAAuBF,eAAvB,EAAwCC,WAAxC;AACA,aAAKE,YAAL,CAAkB,KAAlB,EAAyBH,eAAzB,EAA0CC,WAA1C;AACA;AACD,KAXD;;AAaAzB,SAAKkB,EAAL,CAAQ,OAAR,EAAiB,UAACU,IAAD,CAAK,WAAL,EAAkBC,MAAlB,CAAwB,WAAxB,EAAwC;AACxD,YAAK7B,IAAL,GAAY,IAAZ;AACA,YAAKe,YAAL,CAAkB,OAAlB,EAA2B,qCAAoBc,MAApB,CAA3B;AACA,KAHD;AAIA,IAvBS,EAuBPC,MAvBO,CAuBA,KAAKpC,IAvBL,CAAV;AAwBA;;;qCAEiB,WAAY;AAC7B,UAAO,CAAP;AACA","file":"buzzer.js","sourcesContent":["\n'use strict';\n\nimport * as ip from 'ip';\nimport * as ws from 'nodejs-websocket';\nimport { Buzzer } from '../Buzzer';\nimport { BuzzerNotFoundError } from '../BuzzerNotFoundError';\nimport { BuzzerReadError } from '../BuzzerReadError';\n\nexport class WebsocketBuzzer extends Buzzer {\n\n\tconstructor(port=8083) {\n\t\tsuper();\n\t\tthis.port = port;\n\t\tthis.handlers = [];\n\t}\n\n\tconnect(timeout=8000) {\n\t\tthis.timeout = timeout;\n\t\tthis.initWebsocket();\n\t}\n\n\tleave() {\n\t\tthis.ws.close();\n\t}\n\n\tlightOn(controllerIndexes/*:any*/) {\n\t\tthis.conn.send(JSON.stringify({\n\t\t\t'lights': controllerIndexes,\n\t\t\t'on': true\n\t\t}));\n\t}\n\n\tlightOff(controllerIndexes/*:any*/) {\n\t\tthis.conn.send(JSON.stringify({\n\t\t\t'lights': controllerIndexes,\n\t\t\t'on': false\n\t\t}));\n\t}\n\t\n\tblink(controllerIndexes/*:Array<number>*/, times/*:number*/=5, duration/*:number*/=0.2) {\n\t}\n\n\tinitWebsocket() {\n\t\tconsole.log('WebBuzzer : listening ws on '+this.port);\n\n\t\tlet interval;\n\t\tlet startTime = Date.now();\n\t\tlet tick = () => {\n\t\t\tlet currentTime = Date.now();\n\t\t\tif (currentTime - startTime > this.timeout) {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tif (this.ws) {\n\t\t\t\t\tthis.ws.close();\n\t\t\t\t}\n\t\t\t\tthis.triggerEvent('error', new BuzzerNotFoundError('PS2 buzzer not found'));\n\t\t\t}\n\t\t};\n\t\tinterval = setInterval(tick, 1000);\n\t\ttick();\n\n\t\tthis.ws = ws.createServer((conn) => {\n\t\t\tthis.conn = conn;\n\n\t\t\tclearInterval(interval);\n\t\t\tthis.triggerEvent('ready');\n\n\t\t\tconn.on(\"text\", (str/*:string*/) => {\n\t\t\t\tvar data = JSON.parse(str);\n\t\t\t\t\n\t\t\t\tif (data.press != undefined) {\n\t\t\t\t\tvar controllerIndex = data.press;\n\t\t\t\t\tvar buttonIndex = 0;\n\t\t\t\t\t\n\t\t\t\t\tvar key = 'c'+controllerIndex;\n\t\t\t\t\tthis.callHandlers(key, controllerIndex, buttonIndex);\n\t\t\t\t\tthis.callHandlers('all', controllerIndex, buttonIndex);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconn.on(\"close\", (code/*:number*/, reason/*:string*/) => {\n\t\t\t\tthis.conn = null;\n\t\t\t\tthis.triggerEvent('leave', new BuzzerReadError(reason));\n\t\t\t});\n\t\t}).listen(this.port);\n\t}\n\n\tcontrollersCount()/*:number*/ {\n\t\treturn 4;\n\t}\n}\n"]}